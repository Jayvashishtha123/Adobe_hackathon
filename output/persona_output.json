{
  "metadata": {
    "persona": "PhD Researcher in Computational Biology",
    "job_to_be_done": "Prepare literature review on GNNs",
    "timestamp": "Thu Jul 24 09:34:17 2025"
  },
  "sections": [
    {
      "document": "adobe_problem.pdf",
      "page": 7,
      "section_title": "Round 1B: Persona-Driven Document Intelligence  ",
      "content": "Round 1B: Persona-Driven Document Intelligence  \nTheme:\u202f\u201cConnect What Matters \u2014 For the User Who Matters\u201d  \nChallenge Brief (For Participants)  \nYou will build a system that acts as an intelligent document analyst, extracting \nand prioritizing the most relevant sections from a collection of documents based \non a specific persona and their job-to-be-done.  \nInput Specification  \n2. Document Collection: 3-10 related PDFs Persona Definition: Role \ndescription with specific expertise and focus areas  \n3. Job-to-be-Done: Concrete task the persona needs to accomplish  \nDocument collection, persona and job-to-be-done can be very diverse. So, the \nsolution that teams need to build needs to be generic to generalize to this \nvariety.   \n\u2022 Documents can be from any domain (Example: Research papers, \nschool/college books, financial reports, news articles etc.)  \n\u2022 Persona can again be very diverse (Example: Researcher, Student, \nSalesperson, Journalist, Entrepreneur etc)  \n\u2022 Job-to-be-done: This will be related to the persona (Example: \nProvide a literature review for a given topic and available research \npapers, What should I study for Organic Chemistry given the \nchemistry documents, Summarize the financials of corporation xyz \ngiven the detailed year end financial reports etc.)  \nSample Test Cases  \nTest Case 1: Academic Research  \n\u2022 Documents: 4 research papers on \"Graph Neural Networks for \nDrug Discovery\"  \n\u2022 Persona: PhD Researcher in Computational Biology  \n\u2022 Job: \"Prepare a comprehensive literature review focusing on \nmethodologies, datasets, and performance benchmarks\"  \n  \n",
      "importance_rank": 0.1881355673477716
    },
    {
      "document": "adobe_problem.pdf",
      "page": 5,
      "section_title": "Model size  \u2264 200MB (if used)  ",
      "content": "Model size  \u2264 200MB (if used)  \nNetwork  \nNo internet access \nallowed  \nRuntime  \nMust run on CPU (amd64), \nyour solution should run on \nthe system with 8 CPUs and \n16 GB RAM configurations   \n  \nScoring Criteria  \nCriteria  \nMax \nPoints  \nHeading Detection Accuracy (Precision + \nRecall)  \n25  \nPerformance (Time & Size Compliance)  \n10  \nBonus: Multilingual Handling (e.g., \nJapanese)  \n10  \nTotal  \n45  \n  \nSubmission Checklist  \n1. Git Project with a working Dockerfile in the root director and   \n2. A working Dockerfile  \n3. All dependencies installed within the container  \n4. A README.md that explains:  \no Your approach  \no Any models or libraries used  \no How to build and run your solution (This is purely for \ndocumentation purpose, your solution should run using the \n\u201cExpected Execution\u201d section above.  \nPro Tips  \n\u2022 Don\u2019t rely solely on font sizes for heading level determination \u2014 \nheadings in some PDFs break that assumption.  \n\u2022 Test your solution across both simple and complex PDFs.  \n\u2022 Make your code modular \u2014 you\u2019ll reuse this structure in Round \n1B.  \n",
      "importance_rank": 0.05232880635646084
    },
    {
      "document": "sample.pdf",
      "page": 9,
      "section_title": "\u25cbDesign the system architecture, database schema, and user",
      "content": "\u25cbDesign the system architecture, database schema, and user\ninterface.\n\u25cbCreate prototypes or wireframes for the user interface to\nvalidate the design with stakeholders.\n\u25cbGather feedback and make necessary adjustments before\nimplementation.\n5. Development (Iterative):\n\u25cbDevelop the features selected for the current sprint using Agile\npractices (e.g., pair programming, test-driven development).\n\u25cbConduct daily stand-up meetings to monitor progress, identify\nblockers, and facilitate team communication.\n\u25cbIntegrate and test the developed features continuously to ensure\nfunctionality and quality.\n6. Testing:\n\u25cbPerform comprehensive testing for each sprint, including unit\ntesting, integration testing, and user acceptance testing (UAT).\n\u25cbInvolve end-users (receptionists, lab technicians) to validate that\nthe module meets their requirements.\n\u25cbCapture feedback and address any defects or changes required.\n7. Review and Retrospective:\n\u25cbAt the end of each sprint, conduct a sprint review meeting to\ndemonstrate the completed features to stakeholders.\n\u25cbGather feedback and update the product backlog accordingly.\n\u25cbHold a sprint retrospective meeting to discuss what went well,\nwhat could be improved, and actions for the next sprint.\n8. Deployment:\n\u25cbDeploy the completed features of the Registration Block module\nin a production or staging environment.\n\u25cbMonitor system performance and user feedback for any issues.\n9. Maintenance and Support:\n",
      "importance_rank": 0.0375927235381669
    },
    {
      "document": "sample.pdf",
      "page": 10,
      "section_title": "\u25cbProvide ongoing maintenance and support to address any bugs,",
      "content": "\u25cbProvide ongoing maintenance and support to address any bugs,\nfeature requests, or performance issues.\n\u25cbPlan for future updates or enhancements based on user\nfeedback and evolving requirements.\n",
      "importance_rank": 0.030831061570941492
    },
    {
      "document": "sample.pdf",
      "page": 21,
      "section_title": "2.5 USE CASE DESCRIPTION",
      "content": "2.5 USE CASE DESCRIPTION\n(1) PATIENT\n* REGISTRATION\nDESCRIPTION - The new patient can register themselves and add their details\nlike name,\nage , gender, blood group etc. The patient entry will be made in the hms\ndatabase.\nPRE -CONDITION \u2013 The patient must be a new patient, If necessary fields left by\nuser\nthen prompt user to fill the necessary fields.\nMAIN FLOW OF EVENTS\n1. Patient selects sign up in login module.\n2. A registration form get displayed\n3. Patient fills the required details.\nPOST CONDITIONS - Patient record is added to hms database.\n* UPDATION\nDESCRIPTION-The patient should be enabled to update his/her details and the\nchanges\nshould reflect in hms database.\nPRE-CONDITION \u2013 The patient must be a registered patient, The patient cannot\nupdate\ndetails after treatment starts.\nMAIN FLOW OF EVENTS\n1. Patient logs in to the system.\n2. Patient view his record\n3. Patient selects update details.\n4. Now patient may change the necessary fields.\n5. Pop of update details.\nPOST CONDITION - The record of patient is updated in hms database\n",
      "importance_rank": 0.024217843358802536
    },
    {
      "document": "adobe_problem.pdf",
      "page": 4,
      "section_title": "3. Sample Dockerfile  ",
      "content": "3. Sample Dockerfile  \n4. Sample Solution \n Docker Requirements  \n\u2022  \n\u2022 Please ensure your Dockerfile is compatible with AMD64 \narchitecture. Since we will build and run the image on an AMD64 \nmachine, your base image and any dependencies should support \nlinux/amd64. Optionally, you can include the following in your \nDockerfile to explicitly specify the platform: FROM --\nplatform=linux/amd64 <base_image>  \n\u2022 CPU architecture: amd64 (x86_64)  \n\u2022 No GPU dependencies  \n\u2022 Model size (if used) \u2264 200MB  \n\u2022 Should work offline \u2014 no network/internet calls  \nExpected Execution  \nWe will build the docker image using the following command: \n```docker build --platform linux/amd64 -t \nmysolutionname:somerandomidentifier``` \n After building the image, we will run the solution using the run command \nspecified in the submitted instructions. \n```docker run --rm -v $(pwd)/input:/app/input -v $(pwd)/output:/app/output --\nnetwork none mysolutionname:somerandomidentifier```  \nYour container should:  \n\u2022 Automatically process all PDFs from /app/input directory, \ngenerating a corresponding filename.json in /app/output for each \nfilename.pdf  \n\u2022 output.json  \n Constraints  \nConstraint  \nRequirement  \nExecution \ntime  \n\u2264 10 seconds for a 50-page \nPDF  \n",
      "importance_rank": 0.023873673437029782
    },
    {
      "document": "sample.pdf",
      "page": 3,
      "section_title": "Declaration",
      "content": "Declaration\nWe, hereby declare that this project report titled \"Hospital Management System\nRegistration Block\" is an authentic record of my own work carried out under the\nguidance of Dr. Dashrath Mahto. The project was developed within a time frame of\nLabs using ReactJs, and Firebase. All the ReactJs files and components described in\nthis report were created by me unless otherwise acknowledged in the references.\nDate:\nSignature:\n",
      "importance_rank": 0.02369598895561522
    },
    {
      "document": "adobe_problem.pdf",
      "page": 8,
      "section_title": "Test Case 2: Business Analysis  ",
      "content": "Test Case 2: Business Analysis  \n\u2022 Documents: 3 annual reports from competing tech companies \n(2022-2024)  \n\u2022 Persona: Investment Analyst  \n\u2022 Job: \"Analyze revenue trends, R&D investments, and market \npositioning strategies\"  \nTest Case 3: Educational Content  \n\u2022 Documents: 5 chapters from organic chemistry textbooks  \n\u2022 Persona: Undergraduate Chemistry Student  \n\u2022 Job: \"Identify key concepts and mechanisms for exam preparation \non reaction kinetics\"  \nRequired Output  \n\u2022 Output JSON format: Refer challenge1b_output.json  \nThe output should contain:  \n1. Metadata:  \na. Input documents  \nb. Persona  \nc. Job to be done  \nd. Processing timestamp  \n2. Extracted Section:  \na. Document  \nb. Page number  \nc. Section title  \nd. Importance_rank  \n3. Sub-section Analysis:  \na. Document \nb.  \nc. Refined Text \nd. Page Number Constraints  \n\u2022 Must run on CPU only  \n\u2022 Model size \u2264 1GB  \n\u2022 Processing time \u2264 60 seconds for document collection (3-5 \ndocuments)  \n\u2022 No internet access allowed during execution  \n  \n",
      "importance_rank": 0.023168523481532248
    },
    {
      "document": "adobe_problem.pdf",
      "page": 2,
      "section_title": "Welcome to the\u202f\u201cConnecting the Dots\u201d Challenge  ",
      "content": "Welcome to the\u202f\u201cConnecting the Dots\u201d Challenge  \n \nRethink Reading. Rediscover Knowledge  \nWhat if every time you opened a PDF, it didn\u2019t just sit there\u2014it spoke to you, \nconnected ideas, and narrated meaning across your entire library?  \nThat\u2019s the future we\u2019re building \u2014 and we want you to help shape it.  \nIn the Connecting the Dots Challenge, your mission is to reimagine the humble \nPDF as an intelligent, interactive experience\u2014one that understands structure, \nsurfaces insights, and responds to you like a trusted research companion.  \nThe Journey Ahead \n  \n\u2022 Round 1:  \nKick things off by building the brains \u2014 extract structured outlines from \nraw PDFs with blazing speed and pinpoint accuracy. Then, power it up \nwith on-device intelligence that understands sections and links related \nideas together.  \n\u2022 Round 2:  \nIt\u2019s showtime! Build a beautiful, intuitive reading webapp using Adobe\u2019s \nPDF Embed API. You will be using your Round 1 work to design a \nfuturistic webapp. \nWhy This Matters  \nIn a world flooded with documents, what wins is not more content \u2014 it\u2019s \ncontext. You\u2019re not just building tools \u2014 you\u2019re building the future of how we \nread, learn, and connect. No matter your background \u2014 ML hacker, UI builder, \nor insight whisperer \u2014 this is your stage.  \nAre you in?  \nIt\u2019s time to read between the lines. Connect the dots. And build a PDF \nexperience that feels like magic. Let\u2019s go.  \n",
      "importance_rank": 0.022233311071172226
    },
    {
      "document": "sample.pdf",
      "page": 30,
      "section_title": "Workflow",
      "content": "Workflow\n\u25cfPatient:-\n\u25cbLogin/Sign Up\n\u25cbInput his/her details in form\n\u25cbSearch For Doctor\n\u25cbMake Appointment\n\u25cbMaking Payment\n\u25cbVerify Payment\n\u25cfDoctor:-\n\u25cbGive Response to the User (Accept/Reject).\n",
      "importance_rank": 0.0196862895589832
    }
  ]
}